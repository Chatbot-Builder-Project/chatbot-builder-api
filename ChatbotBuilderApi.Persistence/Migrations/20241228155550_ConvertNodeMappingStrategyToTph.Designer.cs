// <auto-generated />
using System;
using ChatbotBuilderApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatbotBuilderApi.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241228155550_ConvertNodeMappingStrategyToTph")]
    partial class ConvertNodeMappingStrategyToTph
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Chatbots.Chatbot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Chatbot");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatbotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatbotId");

                    b.ToTable("Conversation");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.ValueObjects.InputMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("InputMessage");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.ValueObjects.OutputMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("OutputMessage");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Abstract.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("Node");

                    b.HasDiscriminator<string>("NodeType").HasValue("Node");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.InputPortId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.OutputPortId>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Enum", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("Enum");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Links.DataLink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourcePortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("DataLink");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Links.FlowLink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GraphId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("FlowLink");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Graph", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ChatbotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StartNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatbotId")
                        .IsUnique()
                        .HasFilter("[ChatbotId] IS NOT NULL");

                    b.HasIndex("ConversationId")
                        .IsUnique()
                        .HasFilter("[ConversationId] IS NOT NULL");

                    b.HasIndex("CurrentNodeId")
                        .IsUnique();

                    b.HasIndex("StartNodeId")
                        .IsUnique();

                    b.HasIndex("WorkflowId")
                        .IsUnique()
                        .HasFilter("[WorkflowId] IS NOT NULL");

                    b.ToTable("Graph");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InputMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InteractionNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InputMessageId")
                        .IsUnique()
                        .HasFilter("[InputMessageId] IS NOT NULL");

                    b.HasIndex("InteractionNodeId")
                        .IsUnique()
                        .HasFilter("[InteractionNodeId] IS NOT NULL");

                    b.ToTable("InteractionInput");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionOutput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpectedOptionMetas")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<bool>("OptionExpected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OutputMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TextExpected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OutputMessageId")
                        .IsUnique()
                        .HasFilter("[OutputMessageId] IS NOT NULL");

                    b.ToTable("InteractionOutput");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Workflows.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Workflow");
                });

            modelBuilder.Entity("ImageOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("ImageOutputPortInputPort");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OptionOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("OptionOutputPortInputPort");
                });

            modelBuilder.Entity("TextOutputPortInputPort", b =>
                {
                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OutputPortId", "InputPortId");

                    b.HasIndex("InputPortId");

                    b.ToTable("TextOutputPortInputPort");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Node");

                    b.Property<Guid?>("OptionOutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OutputEnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OutputOptionMetas")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid?>("TextInputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TextOutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OptionOutputPortId")
                        .IsUnique()
                        .HasFilter("[OptionOutputPortId] IS NOT NULL");

                    b.HasIndex("OutputEnumId");

                    b.HasIndex("TextInputPortId")
                        .IsUnique()
                        .HasFilter("[TextInputPortId] IS NOT NULL");

                    b.HasIndex("TextOutputPortId")
                        .IsUnique()
                        .HasFilter("[TextOutputPortId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("InteractionNode");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Node");

                    b.Property<string>("InjectedTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OutputPortId")
                        .IsUnique()
                        .HasFilter("[OutputPortId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("PromptNode");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Node");

                    b.Property<Guid?>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OutputPortId")
                        .IsUnique()
                        .HasFilter("[OutputPortId] IS NOT NULL");

                    b.ToTable("Node", t =>
                        {
                            t.Property("OutputPortId")
                                .HasColumnName("StaticNode_OutputPortId");
                        });

                    b.HasDiscriminator().HasValue("StaticNodeImageData");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Node");

                    b.Property<Guid?>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OutputPortId")
                        .IsUnique()
                        .HasFilter("[OutputPortId] IS NOT NULL");

                    b.ToTable("Node", t =>
                        {
                            t.Property("OutputPortId")
                                .HasColumnName("StaticNode_OutputPortId1");
                        });

                    b.HasDiscriminator().HasValue("StaticNodeOptionData");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Node");

                    b.Property<Guid?>("OutputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OutputPortId")
                        .IsUnique()
                        .HasFilter("[OutputPortId] IS NOT NULL");

                    b.ToTable("Node", t =>
                        {
                            t.Property("OutputPortId")
                                .HasColumnName("StaticNode_OutputPortId2");
                        });

                    b.HasDiscriminator().HasValue("StaticNodeTextData");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.SwitchNode", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Node");

                    b.Property<string>("Bindings")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid?>("EnumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputPortId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("EnumId");

                    b.HasIndex("InputPortId")
                        .IsUnique()
                        .HasFilter("[InputPortId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SwitchNode");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.InputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("InputPort<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.InputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("InputPort<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.InputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PromptNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PromptNodeId");

                    b.ToTable("InputPort<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.OutputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("OutputPort<ImageData>");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.OutputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("OutputPort<OptionData>");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasBaseType("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.OutputPortId>");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("OutputPort<TextData>");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Chatbots.Chatbot", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Workflows.Workflow", null)
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderApi.Domain.Chatbots.ValueObjects.Version", "Version", b1 =>
                        {
                            b1.Property<Guid>("ChatbotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Major")
                                .HasColumnType("int");

                            b1.HasKey("ChatbotId");

                            b1.HasIndex("Major")
                                .IsUnique();

                            b1.ToTable("Chatbot");

                            b1.WithOwner()
                                .HasForeignKey("ChatbotId");
                        });

                    b.Navigation("Version")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.Conversation", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Chatbots.Chatbot", null)
                        .WithMany()
                        .HasForeignKey("ChatbotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.ValueObjects.InputMessage", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Conversations.Conversation", null)
                        .WithMany("InputMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.ValueObjects.OutputMessage", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Conversations.Conversation", null)
                        .WithMany("OutputMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Abstract.Node", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Graph", null)
                        .WithMany("Nodes")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("NodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("NodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.InputPortId>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Graph", null)
                        .WithMany("InputPorts")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Abstract.Port<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Ids.OutputPortId>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Graph", null)
                        .WithMany("OutputPorts")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Enum", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Graph", null)
                        .WithMany("Enums")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EnumId");

                            b1.ToTable("Enum");

                            b1.WithOwner()
                                .HasForeignKey("EnumId");
                        });

                    b.OwnsMany("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData", "Options", b1 =>
                        {
                            b1.Property<Guid>("EnumId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.HasKey("EnumId", "Id");

                            b1.ToTable("Enum_Options");

                            b1.WithOwner()
                                .HasForeignKey("EnumId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Options");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Links.DataLink", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Graph", null)
                        .WithMany("DataLinks")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("DataLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DataLinkId");

                            b1.ToTable("DataLink");

                            b1.WithOwner()
                                .HasForeignKey("DataLinkId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("DataLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("DataLinkId");

                            b1.ToTable("DataLink");

                            b1.WithOwner()
                                .HasForeignKey("DataLinkId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Links.FlowLink", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Graph", null)
                        .WithMany("FlowLinks")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("FlowLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FlowLinkId");

                            b1.ToTable("FlowLink");

                            b1.WithOwner()
                                .HasForeignKey("FlowLinkId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("FlowLinkId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("FlowLinkId");

                            b1.ToTable("FlowLink");

                            b1.WithOwner()
                                .HasForeignKey("FlowLinkId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Graph", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Chatbots.Chatbot", null)
                        .WithOne("Graph")
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Graph", "ChatbotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatbotBuilderApi.Domain.Conversations.Conversation", null)
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Graph", "ConversationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Abstract.Node", null)
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Graph", "CurrentNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Abstract.Node", null)
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Graph", "StartNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderApi.Domain.Workflows.Workflow", null)
                        .WithOne("Graph")
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Graph", "WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionInput", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Conversations.ValueObjects.InputMessage", null)
                        .WithOne("Input")
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionInput", "InputMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", null)
                        .WithOne("InteractionInput")
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionInput", "InteractionNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData", "Option", b1 =>
                        {
                            b1.Property<Guid>("InteractionInputId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionInputId");

                            b1.ToTable("InteractionInput");

                            b1.WithOwner()
                                .HasForeignKey("InteractionInputId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData", "Text", b1 =>
                        {
                            b1.Property<Guid>("InteractionInputId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionInputId");

                            b1.ToTable("InteractionInput");

                            b1.WithOwner()
                                .HasForeignKey("InteractionInputId");
                        });

                    b.Navigation("Option");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionOutput", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Conversations.ValueObjects.OutputMessage", null)
                        .WithOne("Output")
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Interactions.InteractionOutput", "OutputMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData", "TextOutput", b1 =>
                        {
                            b1.Property<Guid>("InteractionOutputId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InteractionOutputId");

                            b1.ToTable("InteractionOutput");

                            b1.WithOwner()
                                .HasForeignKey("InteractionOutputId");
                        });

                    b.Navigation("TextOutput");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Workflows.Workflow", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderApi.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OptionOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TextOutputPortInputPort", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", null)
                        .WithMany()
                        .HasForeignKey("InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", null)
                        .WithMany()
                        .HasForeignKey("OutputPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", "OptionOutputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", "OptionOutputPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Enum", "OutputEnum")
                        .WithMany()
                        .HasForeignKey("OutputEnumId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", "TextInputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", "TextInputPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", "TextOutputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", "TextOutputPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OptionOutputPort");

                    b.Navigation("OutputEnum");

                    b.Navigation("TextInputPort");

                    b.Navigation("TextOutputPort");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", "OutputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", "OutputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.Prompt.PromptTemplate", "Template", b1 =>
                        {
                            b1.Property<Guid>("PromptNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PromptNodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("PromptNodeId");
                        });

                    b.Navigation("OutputPort");

                    b.Navigation("Template")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", "OutputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", "OutputPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("OutputPort");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", "OutputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", "OutputPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("OutputPort");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", "OutputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.StaticNode<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", "OutputPortId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData", "Data", b1 =>
                        {
                            b1.Property<Guid>("StaticNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StaticNodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("StaticNodeId");
                        });

                    b.Navigation("Data");

                    b.Navigation("OutputPort");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.SwitchNode", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Enum", "Enum")
                        .WithMany()
                        .HasForeignKey("EnumId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", "InputPort")
                        .WithOne()
                        .HasForeignKey("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.SwitchNode", "InputPortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData", "SelectedOption", b1 =>
                        {
                            b1.Property<Guid>("SwitchNodeId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SwitchNodeId");

                            b1.ToTable("Node");

                            b1.WithOwner()
                                .HasForeignKey("SwitchNodeId");
                        });

                    b.Navigation("Enum");

                    b.Navigation("InputPort");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.InputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.HasOne("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", null)
                        .WithMany("InputPorts")
                        .HasForeignKey("PromptNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData", "Data", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("InputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("InputPortId");

                            b1.ToTable("InputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("InputPortId");
                        });

                    b.Navigation("Data");

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.ImageData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<ImageData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.OptionData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<OptionData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Ports.OutputPort<ChatbotBuilderApi.Domain.Graphs.ValueObjects.Data.TextData>", b =>
                {
                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.InfoMeta", "Info", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Identifier")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.OwnsOne("ChatbotBuilderApi.Domain.Graphs.ValueObjects.Meta.VisualMeta", "Visual", b1 =>
                        {
                            b1.Property<Guid>("OutputPortId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<float>("X")
                                .HasColumnType("real");

                            b1.Property<float>("Y")
                                .HasColumnType("real");

                            b1.HasKey("OutputPortId");

                            b1.ToTable("OutputPort<TextData>");

                            b1.WithOwner()
                                .HasForeignKey("OutputPortId");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Visual")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Chatbots.Chatbot", b =>
                {
                    b.Navigation("Graph")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.Conversation", b =>
                {
                    b.Navigation("InputMessages");

                    b.Navigation("OutputMessages");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.ValueObjects.InputMessage", b =>
                {
                    b.Navigation("Input")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Conversations.ValueObjects.OutputMessage", b =>
                {
                    b.Navigation("Output")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Graph", b =>
                {
                    b.Navigation("DataLinks");

                    b.Navigation("Enums");

                    b.Navigation("FlowLinks");

                    b.Navigation("InputPorts");

                    b.Navigation("Nodes");

                    b.Navigation("OutputPorts");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Workflows.Workflow", b =>
                {
                    b.Navigation("Graph")
                        .IsRequired();
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.InteractionNode", b =>
                {
                    b.Navigation("InteractionInput");
                });

            modelBuilder.Entity("ChatbotBuilderApi.Domain.Graphs.Entities.Nodes.Prompt.PromptNode", b =>
                {
                    b.Navigation("InputPorts");
                });
#pragma warning restore 612, 618
        }
    }
}
